# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      # Set fail-fast
      fail-fast: true

      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        unicode_supprt: [_Ansi, _Unicode]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            unicode_supprt: _Unicode
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            unicode_supprt: _Unicode
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUNICODE=${{ matrix.unicode_supprt }}
        -S ${{ github.workspace }}/src

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      shell: pwsh
      run: |
        $exe = "${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/yaclap.exe"
        if(-not (Test-path $exe -PathType leaf))
        {
            $exe = "${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/yaclap"
        }
        if(-not (Test-path $exe -PathType leaf))
        {
            $exe = "${{ steps.strings.outputs.build-output-dir }}/yaclap"
        }
        Write-Host "Testing $exe"
        ./test/calltest.ps1 $exe
